# Usage: docker compose -f 900-run-compose.yml up

services:
  postgres:
    image: postgres:latest
    container_name: testuniqueviolation-postgres
    environment:
      POSTGRES_DB: testuniqueviolation
      POSTGRES_USER: testuniqueviolation
      POSTGRES_PASSWORD: testuniqueviolation
    ports:
      - "4079:5432"
    mem_limit: 2g
    networks:
      - testuniqueviolation-net
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready && psql -U "testuniqueviolation" -d "testuniqueviolation" -tAc 'SELECT 1'
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 3s
  
  app0:
    image: testuniqueviolation-app
    container_name: testuniqueviolation-app-0
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      CF_INSTANCE_INDEX: 0
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      DATABASE_ENDPOINT: postgres://testuniqueviolation:testuniqueviolation@postgres/testuniqueviolation
      JAVA_OPTS: >-
        [
          "-Xrunjdwp:transport=dt_socket,address=0.0.0.0:8787,server=y,suspend=n"
        ]
    ports:
      - "4080:8080"
      - "4076:8787"
    networks:
      - testuniqueviolation-net
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/"]
      interval: 5s
      timeout: 2s
      retries: 50
      start_period: 5s

  app1:
    image: testuniqueviolation-app
    container_name: testuniqueviolation-app-1
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      CF_INSTANCE_INDEX: 1
      ADMIN_PASSWORD: n0t-A-s3cRet
      DATABASE_ENDPOINT: postgres://testuniqueviolation:testuniqueviolation@postgres/testuniqueviolation
      JAVA_OPTS: >-
        [
          "-Xrunjdwp:transport=dt_socket,address=0.0.0.0:8787,server=y,suspend=n"
        ]
    ports:
      - "4081:8080"
      - "4077:8787"
    networks:
      - testuniqueviolation-net
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/"]
      interval: 5s
      timeout: 2s
      retries: 50
      start_period: 5s

  proxy:
    image: alpine/socat
    container_name: testuniqueviolation-portproxy
    stdin_open: true      # allows interactive input
    tty: true             # allocates a pseudo-TTY
    entrypoint: ["/bin/sh"]
    command:
      - "-c"
      - >-
        echo 'Interactive proxy ready. You can launch http://localhost:4078 in your browser.';
        echo 'Use `docker attach testuniqueviolation-portproxy` to gain control';
        set -ex -o pipefail;
        setsid socat tcp-listen:8080,fork,reuseaddr tcp-connect:app0:8080 &
        echo;
        read -n 1 -s -r -p"press any key to switch" x;
        echo;
        kill -KILL -$!;
        wait || true;
        echo 'Switching to app1';
        setsid socat tcp-listen:8080,fork,reuseaddr tcp-connect:app1:8080 &
        echo;
        read -n 1 -s -r -p"press any key to exit" x;
        echo;
        kill -KILL -$!;
        wait || true;
    ports:
      - "4078:8080"
    networks:
      - testuniqueviolation-net
    depends_on:
      app0:
        condition: service_healthy
      app1:
        condition: service_healthy

networks:
  testuniqueviolation-net:
    driver: bridge
